"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[8425],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return p}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(t),p=o,h=m["".concat(l,".").concat(p)]||m[p]||d[p]||r;return t?a.createElement(h,s(s({ref:n},u),{},{components:t})):a.createElement(h,s({ref:n},u))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<r;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8969:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var a=t(7462),o=t(3366),r=(t(7294),t(3905)),s=["components"],i={title:"Javascript",extends:"_layouts.documentation",description:"Javascript Dev Snippets",section:"content"},l="Javascript",c={unversionedId:"javascript/index",id:"javascript/index",title:"Javascript",description:"Javascript Dev Snippets",source:"@site/docs/javascript/index.md",sourceDirName:"javascript",slug:"/javascript/",permalink:"/my-docs/docs/javascript/",editUrl:"https://github.com/easy-quest/my-docs/edit/master/website/docs/javascript/index.md",tags:[],version:"current",frontMatter:{title:"Javascript",extends:"_layouts.documentation",description:"Javascript Dev Snippets",section:"content"},sidebar:"tutorialSidebar",previous:{title:"Java",permalink:"/my-docs/docs/java/"},next:{title:"Guidelines for contributing to javascript snippets",permalink:"/my-docs/docs/javascript/contributing"}},u=[{value:"Variables",id:"variables",children:[{value:"Scopes",id:"scopes",children:[{value:"var",id:"var",children:[{value:"Code",id:"code",children:[],level:5}],level:4}],level:3},{value:"let",id:"let",children:[{value:"Code",id:"code-1",children:[],level:5}],level:3},{value:"const",id:"const",children:[{value:"Code",id:"code-2",children:[],level:5},{value:"Code",id:"code-3",children:[],level:5}],level:3}],level:2}],d={toc:u};function m(e){var n=e.components,t=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"javascript"},"Javascript"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#variables"},"Variables")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#arrays"},"Arrays")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#objects"},"Objects")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#strings"},"Strings")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#dates"},"Dates")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#promises"},"Promises")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#asyncawait"},"Async/Await")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#useful-functions"},"Useful Functions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#closures"},"Closures")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#destructuring"},"Destructuring"))),(0,r.kt)("h2",{id:"variables"},"Variables"),(0,r.kt)("h3",{id:"scopes"},"Scopes"),(0,r.kt)("h4",{id:"var"},"var"),(0,r.kt)("p",null,"The JavaScript variables statement is used to declare a variable and, optionally, we can initialize the value of that variable.\nVariable declarations are processed before the execution of the code.\nThe scope of a JavaScript variable declared with var is its current execution context.\nThe scope of a JavaScript variable declared outside the function is global."),(0,r.kt)("h5",{id:"code"},"Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JavaScript"},"\nfunction nodeSimplified(){\n  var a =5;\n  console.log(a);  // output 5\n  if(true){\n   var a=10;\n   console.log(a); // output 10\n  }\n  console.log(a);  // output 10\n}\n")),(0,r.kt)("h3",{id:"let"},"let"),(0,r.kt)("p",null,"The let statement declares a local variable in a block scope. It is similar to var, in that we can optionally initialize the variable.\nThe let statement allows you to create a variable with the scope limited to the block on which it is used.\nIt is similar to the variable we declare in other languages."),(0,r.kt)("p",null,"The let declaration is only supported beginning in ",(0,r.kt)("a",{parentName:"p",href:"http://es6-features.org/#BlockScopedVariables"},"ECMAScript6 (ES6)")),(0,r.kt)("h5",{id:"code-1"},"Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JavaScript"},"function nodeSimplified(){\n  let a =5;\n  console.log(a);  // output 5\n  if(true){\n   let a=20;\n   console.log(a); // output 20\n  }\n  console.log(a);  // output 5\n}\n\n")),(0,r.kt)("h3",{id:"const"},"const"),(0,r.kt)("p",null,"const statement values can be assigned once and they cannot be reassigned. The scope of const statement works similar to let statements."),(0,r.kt)("p",null,"The const declaration is only supported beginning in ",(0,r.kt)("a",{parentName:"p",href:"http://es6-features.org/#Constants"},"ECMAScript6 (ES6)"),"."),(0,r.kt)("h5",{id:"code-2"},"Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JavaScript"},"\nfunction test(){\n  const MY_VARIABLE =5;\n  console.log(MY_VARIABLE);  //output 5\n  MY_VARIABLE =20;           //throws type error\n  console.log(MY_VARIABLE);\n}\n")),(0,r.kt)("p",null,"The fact that the value of a ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," cannot be changed, only applies for ",(0,r.kt)("strong",{parentName:"p"},"Primitive")," types (numbers, strings, booleans, null, undefined). However, they don't apply for ",(0,r.kt)("strong",{parentName:"p"},"Non-Primitive")," types (objects, functions and arrays)"),(0,r.kt)("h5",{id:"code-3"},"Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const obj = {a: 20, b: 30}\nconsole.log(obj.a); // 20\nobj.a = 30;\nconsole.log(obj.a); // 30\n```\n---\n\n## Arrays\n\nArrays are data types used for storing sequences of values. An array is written as a list of comma-separated values inside a pair of square brackets. Any data type can be put into an array including other arrays.\n\n##### Code\n```JavaScript\nconst numbers = [1, 2, 3, 4, 5];\nconst strings = ["apple", "window", "puppy", "cup"];\nconst arrays = [[45, 19, 6], ["hello", "bye"]];\nconst objects = [\n  {\n    name: "David",\n    age: 29\n  },\n  {\n    name: "Heather",\n    age: 45\n  },\n  {\n    name: "James",\n    age: 37\n  }\n];\n```\n\n### shift, unshift, push, pop\nThe unshift() and push() methods are for adding elements to the beginning and end of an array respectively, while the shift() and pop() methods are for removing elements from arrays in the same way.\n\n#### unshift()\n[Array.prototype.unshift()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift) is the method used to add new elements to the beginning of an array. When used, it returns the new length of the array.\n\n##### Code\n```JavaScript\nconst letters = ["c", "d", "e"];\n\nconsole.log(letters.unshift("a", "b")); // Output: 5\nconsole.log(letters); // Output: Array ["a", "b", "c", "d", "e"]\n```\n\n#### shift()\n[Array.prototype.shift()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift) is the method used to remove the first element of an array.\n\n##### Code\n```JavaScript\nconst nums = ["one", "two", "three"];\nconst firstElement = nums.shift();\n\nconsole.log(nums); // Output: Array ["two", "three"]\nconsole.log(firstElement); // Output: "one"\n```\n\n#### push()\n[Array.prototype.push()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push) is a method used to add elements to the end of an array.\n\n##### Code\n```JavaScript\nconst cities = ["London", "Amsterdam", "Berlin"];\n\ncities.push("Copenhagen", "Geneva");\nconsole.log(cities); // Output: Array ["London", "Amsterdam", "Berlin", "Copenhagen", "Geneva"]\n```\n\n#### pop()\n[Array.prototype.pop()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop) is a method used to remove the last element of an array. The removed element is returned.\n\n##### Code\n```JavaScript\nconst sports = ["football", "cricket", "rugby", "baseball", "basketball"];\n\nsports.pop();\nconsole.log(sports); // Output: Array ["football", "cricket", "rugby", "baseball"]\n```\n\n### find, findIndex, map, filter, and reduce\n\nAll of these array methods provide a declarative programming alternative to writing a loop. Each performs some block of code, given in a callback function, to some or all elements of an array.\n\nFind() and filter() are used to select values from an array that meet some condition.\n\nFindIndex() is similar to the Find() method but instead of returning the object, it only return the index of the first item that matches the condition\n\nMap() is used to apply a transformation to all elements of an array, and reduce() is used to apply some accumulation to the values in an array.\n\n### Using the find() Method\n\n[Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find) is the inbuilt function in JavaScript which is used to get a value of the first item in the array that meets the provided condition.\n\nIf more than one item meets the condition, then the first item satisfying the condition is returned. Processing stops when the first matching value is found. This is accomplished by providing a callback function to find() that returns true when a value in the array meets some condition.\n\n**Find returns a single value from the array, or null if no matching value is found.**\n\n#### When to use find()\nWhen you want to find the **first** value in an array that meets some condition.\n\n#### Example: finding an odd number in an array\nThis is how you would use find to find the first odd number in an array of numbers\n\n##### Code\n\n```javascript\nconst numbers = [2,4,6,5,6,7];\n\nlet firstOddNumber = numbers.find((number) => number % 2 === 1);\n\nconsole.log(firstOddNumber); // 5\n```\n\n### Using the findIndex() Method\n\n[Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex) is a builtin function in JavaScript that returns the index of the first item that matches the provided condition.\n\nIf more than one item meets the condition, it will only return the fist one and the processing stops there. If there\'s no item that meets the condition then it will return -1\n\n**Find returns the index of the first matching value, or -1 if no matching value is found.**\n\n#### When to use findIndex()\nWhen you want to find the **first** index of a value inside an array that meets some condition\n\n#### Example: finding the index of an object inside an array\n\n##### Code\n\n```javascript\nconst arrayOfObjects = [{foo: "bar", baz: "qux"}, {bar: "foo", baz: "qux"}]\n\nlet objectIndex = arrayOfObjects.findIndex((object) => object.bar === "foo")\n\nconsole.log(objectIndex); // 1\n```\n\n#### Using the filter() method\n\n[Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) is a built in JavaScript function that returns a subset of the original array in which all of the values match some condition. Like with find, the callback function passed to filter returns either true or false. If it returns true then filter adds that element to the return array, and if it returns false the element is not included.\n\n**Filter returns an array with all values that meet the condition, or an empty array if no value meet the condition.**\n\n#### When to use filter()\nUse filter when you want **all the values** from an array that meet some condition.\n\n#### Example: filter all even numbers in a numeric array\nThis is how you would use filter() to get all even numbers in an array of numbers.\n\n##### Code\n```javascript\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst evenNumbers = numbers.filter(number => number % 2 === 0);\nconsole.log(evenNumbers); // [2, 4, 6, 8]\n```\n\n### Using the map() method\n\n[Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) is a built in JavaScript function that applies some transformation to every element of an array.\n\nIt does this by running a callback function on each element in the array, and returns a new array with the values returned by the callback function.\n\n**Map returns an array that is the same length as the original array.**\n\n#### When to use map()\nWhen you want to apply some function on all elements of an array.\n\n#### Example: doubling the values in a numeric array\nThis is how you would use map() to return a new array with the values in the original array doubled.\n\n##### Code\n```javascript\nconst original = [1, 2, 3, 4];\n\nconst double = original.map(val => val * 2);\nconsole.log(double); // [2, 4, 6, 8]\n```\n\n#### Using the reduce() method\n\nJust like map(), [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce) also runs a callback for each element of an array. What\u2019s different here is that reduce passes the result of this callback (the accumulator) from one array element to the other, accumulating the result.\n\n**Reduce returns a single value that is some accumulation of values in the array.**\n\n#### When to use reduce()\nUse reduce() when you want to accumulate the values in an array into a single value.\n\n#### Example - accumulating student scores from an array of objects\nIn this example, we want the sum of all student scores from the given array of objects.\n\n##### Code\n\nWe have an array with students and their respective score. We can use reduce() to get the total score as shown here.\n\n```javascript\nconst students = [\n  {\n    id: 10,\n    name: "Poe Dameron",\n    score: 75\n  },\n  {\n    id: 2,\n    name: "Temmin \'Snap\' Wexley",\n    score: 30\n  },\n  {\n    id: 4,\n    name: "Tallissan Lintra",\n    score: 50\n  },\n  {\n    id: 19,\n    name: "Ello Asty",\n    score: 10\n  }\n];\n\nconst totalScore = students.reduce((total, student) => total + student.score, 0); // 0 is used as the initial value for total\n\nconsole.log(totalScore); // 165\n```\n\n#### Using the join() method\n\nThe [join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join) method will join all the elements of an array into a string. It has an optional _separator_ parameter. If no parameter is given, the elements are separated with a comma.\n\n#### When to use join()\nUse join() when you want to represent the values in an array as a single, delimited string.\n\n##### Code\n```javascript\nconst arr = ["Lions", "tigers", "bears."];\n\nconst str = arr.join(" and ");\n\nconsole.log(str); //"Lions and tigers and bears."\n```\n\n### List items from an array until a specific string is found\n\n##### Code\n```javascript\nlet cards = [\'Diamond\', \'Spade\', \'Heart\', \'Club\'];\n\nlet currentCard = \'Heart\';\n\nwhile (currentCard !== \'Spade\') {\n        console.log(currentCard);\n            currentCard = cards[Math.floor(Math.random() * 4)];\n       }\nconsole.log(\'found a spade\');\n```\n\n---\n\n### Objects\n\nYou can use objects to store functions, other objects and properties, so you can create more descriptive code. Objects are easy and widely used in javascript.\n\n### Code\n\n```javascript\nconst car = {\n    name: \'Ferrari\',\n    year: 2015,\n    horsepower: 670,\n    isCar: true\n}\nconsole.log(`The ${car.name} of ${car.year} has a hoserpower of ${car.horsepower} and is really a car ? ${car.isCar}`)\n\n//Another example with functions\n\nconst calc = {\n    sum: function(a,b){\n        return a+b;\n    },\n    subtraction: function(a,b){\n        return a-b;\n    }\n}\n\nconsole.log(`The sum of 5 plus 4 is ${calc.sum(5,4)} and the subtraction is ${calc.subtraction(5,4)}`)\n\n\n//An example with nested objects and functions\n\nconst computer ={\n    monitor: \'Acer\',\n    cpu: {\n        name: \'FX-6300\',\n        core: 6,\n        socket: \'AM3 +\'\n    },\n    gpu:{\n        name: \'GTX-950\',\n        memory: 2\n    },\n    ram:{\n        name: \'Hyperx\',\n        gb: 8\n    },\n    printDetails: function() {\n        console.log(`My computer has a monitor ${computer.monitor}, a cpu ${computer.cpu.name} with ${computer.cpu.core} cores, GPU ${computer.gpu.name} and ${computer.ram.gb} of ram.`)\n    }\n}\n\ncomputer.printDetails();\n```\n\n## Strings\n\n### Template strings (string interpolation)\n\nInstead of using string concatenation, we can use a template string, or string interpolation, to include interpreted values in strings.\n\n#### Example: using template strings to print values\nYou can use template strings to print variable values, or the results of functions - anything that can be interpreted by javascript.\n\n### Code\n```javascript\nconst name = \'Cristian\'\nconst age = 20\n\nfunction myCountry(){\n  return \'Brazil\'\n}\n\n// Using concatenation:\nconsole.log(\'My name is \'+name+\' and i am \'+age+\' years old and i live in \'+myCountry()+\'.\')\n\n// Using template string:\nconsole.log(`My name is ${name} and I am ${age} years old and I live in ${myCountry()}.`)\n```\n\n#### split() method\n\nThis method is used to split a string into an array of substrings. It takes two optional parameters, the _separator_ and the _limit_. If the _separator_ parameter is not given, the method will return the entire string. A _separator_ parameter of an empty string ("") will split the string between each character.\n\n##### Code\n\nHere are some examples of a string being split using different separators. The first example also uses the limit parameter.\n\n```javascript\nconst str = "A very interesting string!";\n\nconst arr = str.split(" ", 3);\nconsole.log(arr); //["A", "very", "interesting"]\n\nconst arr2 = string.split("r");\nconsole.log(arr2); //["A ve", "y inte", "esting st", "ing!"]\n```\n\n#### reverse() method\n\nThe reverse() method will reverse the order of an array. It changes the original array, it does not return a new array.\n\n##### Code\n\n```javascript\nconst arr = ["goldfish", "cats", "dogs"];\n\narr.reverse();\n\nconsole.log(arr); //["dogs", "cats", "goldfish"]\n```\n\n#### Using split(), reverse() and join() to reverse the letters of a string.\n\n##### Code\n```javascript\nconst str = "abcde";\n\nconst rev = str\n  .split("")\n  .reverse()\n  .join("");\n\nconsole.log(rev); //"edcba"\n```\n\n#### Using map(), split(), reverse() and join() to reverse the letters of each word in a string.\n\n##### Code\n```javascript\nconst str = "All work and no play makes Jack a dull boy"\n\n// First the string is split into an array:\nconst arr = str.split(" ");\n\n// Then the letters of each word/element in the array are reversed\nconst arr2 = arr.map((x) => x.split("").reverse().join(""));\n// ["llA", "krow", "dna", "on", "yalp", "sekam", "kcaJ", "a", "llud", "yob"]\n\n// Then join each element together again, making sure to use a separator.\nconst newStr = arr2.join(" ");\n\nconsole.log(newStr); // "llA krow dna on yalp sekam kcaJ a llud yob"\n\n// Then go watch The Shining.\n```\n\n#### Using replace() to strip off any html tag from a given html text.\n\nThe syntax for [replace()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) is:\n\n```javascript\nreplace(pattern|matchString, replaceString|function)\n```\n\nWhere the first parameter "pattern" can be a regular expression, or a string and the second parameter can be a string that you want to replace with or a function that can be called for a matched pattern/string.\n\nYou can strip the html tags from any string with the regular expression: ```/<(?:.|\\n)*?>/gi```\n\n#### Example: Strip html tags from an h1 header\nThis is how you could use replace with the regular expression above to strip the h1 tags from a string.\n\n##### Code\n```javascript\nfunction stripHtmlTags(htmlText){\n    if(htmlText && htmlText.length){\n        return htmlText.replace(/<(?:.|\\n)*?>/gi, \'\'); // g is for global replace, i for ignore case.\n    }\n    return htmlText;\n}\nconst str = "<h1>replace() method in javascript is really powerful.</h1>";\n\nconsole.log(stripHtmlTags(str)); // "replace() method in javascript is really powerful."\n\n```\n\n#### Using the match() method\nThe [match()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match) method is similar to replace(), but it simply returns an array with all values from the string that match the expression given.\n\n#### Example: finding all vowels in a string using match()\nTo find all vowels in a string we can use match() as shown here.\n\n##### Code\n```javascript\nlet input = "A fox runs fast. Oh, how fast it runs!";\n\nlet vowels = input.match(/[aeiouAEIOU]/g);\n```\n\nIn this example, `vowels` is an array containing all of the vowels:\n\n```javascript\nconsole.log(vowels);\n// [ \'A\', \'o\', \'u\', \'a\', \'O\', \'o\', \'a\', \'i\', \'u\' ]\n```\n---\n\n## Dates\n\n#### Add/Sub time period to/from a Date variable\n\nto add a period (for example 10 minutes) to Date variable in javascript.\n\n```javascript\nfunction addSecond(date, seconds) {\n  // Time period is in milliseconds so you must multiply second with 1000\n  return new Date(date.getTime() + seconds * 1000);\n}\n\n// add 60 seconds to current time\nexpired = addSecond(new Date(), 60);\n```\n\n#### Display current date format as DD/MM/YYYY\n\n```javascript\nvar d = new Date();\n\nvar date = d.getDate();\nvar month = d.getMonth() + 1; // Since getMonth() returns month from 0-11 not 1-12\nvar year = d.getFullYear();\ndate = (date < 10 ? "0" : "") + date;\nmonth = (month < 10 ? "0" : "") + month;\n\nvar dateStr = date + "/" + month + "/" + year;\nconsole.log(dateStr); // Displays current date in DD/MM/YYYY format\n```\n\n---\n\n## Promises\n\n#### Using the Promise.race() method\n\nThe [Promise.race()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race) method is used to act on the first promise in a group of promises that resolves or rejects.\n\nWhen we pass multiple promises to the Promise.race method, it executes the callback for the first promise that resolves/rejects.\n\n#### Example: demonstrating Promise.race() with setTimeout\nThis trivial example will just demonstrate how Promise.race() works using setTimeout.\n\n#### Code\n```javascript\nconst firstPromise = new Promise((res, rej) => {\n  setTimeout(res, 500, "one");\n});\n\nconst secondPromise = new Promise((res, rej) => {\n  setTimeout(res, 100, "two");\n});\n\nPromise.race([firstPromise, secondPromise]).then(res => console.log(res));\n```\n\n### Using async/await to simplify control flow \nAsync/await can help with code readability and executing Promises after another.\n```javascript\nfunction thenWay() {\n    loadData().then(data=>{\n        if(data) {\n            // Do something in case data is null\n        } \n        process(data);\n        moreProcessing(data.thingy);\n        loadMoreData().then(data => {\n            process(data);\n            moreProcessing(data.thingy);\n        })\n    });\n}\n\nasync function asyncWay() {\n    const data = await loadData();\n    if(data) {\n        // Do something in case data is null\n    } \n    process(data);\n    moreProcessing(data.thingy);\n\n    const newData = loadMoreData();\n    process(newData);\n    moreProcessing(newData.thingy);\n}\n```\n---\n\n## Async/Await\nIntroduced in ES8, async/await is a new way to write asynchronous code. One of its main advantanges over callbacks and Promises is that it makes asynchronous code look very much like synchronous code. There are two parts to this new function:\n\n#### 1) [Async](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\nAdding the Async keyword to a function will cause that function to return a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise):\n##### Code\n```javascript\nasync function sayHi() {\n  return \'hello\';\n}\nconsole.log(sayHi()) //we will get [object Promise] { ... } instead of \'hello\'\n\n//to display \'hello\', we can do the following:\nsayHi()\n.then(res => console.log(res));\n```\n\n#### 2) [Await](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await)\nThe Await operator is used to wait for a **Promise** to be resolved or rejected before resuming the rest of the **Async** function. Do note that **Await can only be used inside an Async function.**\n\n##### Code\n```javascript\nfunction resolveAfter2Seconds() {\n  return new Promise(res => {\n    setTimeout(function() { //we use setTimeout here to mimic a HTTP request\n      res(\'Promise resolved!!!\');\n    }, 2000);\n  })\n}\nasync function sayHi() {\n  const message = await resolveAfter2Seconds(); //waiting for Promise to resolve...\n  console.log(message); //this line will not run until await resolveAfter2Seconds() line returns with a fulfilled Promise\n}\nsayHi(); //\'Promise resolved!!!\' will be displayed after 2 seconds\n```\n\nThe improved clarity and readability may not be that obvious from the above example because we are dealing with only a single Promise. Let\'s use Async/Await to handle multiple Promises:\n##### Code\n```javascript\n//let\'s use the Pokemon API to demonstrate this\nfunction getPokemon(ID) {\n  return fetch(\'https://pokeapi.co/api/v2/pokemon/\' + ID).then(res => res.json());\n}\n\nasync function displayPokemon() {\n  const pokemon1 = await getPokemon(1);\n  const pokemon2 = await getPokemon(2);\n  const pokemon3 = await getPokemon(10);\n  console.log(pokemon1.name); \n  console.log(pokemon2.name);\n  console.log(pokemon3.name);\n}\ndisplayPokemon();\n//output should be:\n//bulbasaur\n//ivysaur\n//caterpie\n```\n\nWhen it comes to handling multiple Promises, Async/Await provides a very clear advantage - you can read and understand the code as if it were synchronous despite it running asynchronously!\n\n### Caveat\nIf you look carefully at the `displayPokemon()` function, the three asynchronous calls are actually being executed sequentially. This means `await getPokemon(2)` will only run after `await getPokemon(1)` is resolved and `await getPokemon(10)` will only run after `getPokemon(2)` is resolved; this results in our function taking a much longer time to return the output. Since all three values are independent of each other, they all should run at the same time. That\'s when we can bring `Promise.all` into the picture:\n\n```javascript\nfunction getPokemon(ID) {\n  return fetch(\'https://pokeapi.co/api/v2/pokemon/\' + ID).then(res => res.json());\n}\nasync function displayPokemonParallel() {\n  //since we want to fetch the data in parallel, we don\'t need the await operator here\n  const getPokemon1 = getPokemon(1);\n  const getPokemon2 = getPokemon(2);\n  const getPokemon3 = getPokemon(10);\n  //Promise.all takes in an array of Promises and returns a single promise when all of them are resolved.\n  //By using await here, we are waiting for all three Promises to resolve and then use array destructuring to store the resolved values in its own variable\n  const [pokemon1, pokemon2, pokemon3] = await Promise.all([getPokemon1, getPokemon2, getPokemon3]);\n  console.log(pokemon1.name); \n  console.log(pokemon2.name);\n  console.log(pokemon3.name);\n}\ndisplayPokemonParallel();\n//output should be:\n//bulbasaur\n//ivysaur\n//caterpie\n```\nSo when using **Async/Await**, it is important to not accidentally run all your requests sequentially and slow down your application.\n\n### Handling errors\nIf a Promise is rejected, the **await** expression throws the rejected value. Hence, one of the ways to handle errors when using **Async/Await** is using a try-catch block:\n#### Code\n```javascript\nfunction rejected() {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      reject(\'this is an error!!!\');\n    }, 1000)\n  })\n}\nasync function getPromise() {\n  try {\n    const value = await rejected(); //Promise is rejected. Await will throw the rejected value\n  } catch(err) { //catch rejected value here\n    console.log(err)\n  }\n}\ngetPromise() //output: this is an error!!!\n```\n\n---\n\n## Useful functions\n\n#### Whitelist Checker\n\nChecks provided keys in reqInput are in whiteList or not\n\n##### Code\n```javascript\n/**\n* @param        {*}                 reqInput  {data input to check white list on}\n* @param        {*}                 whiteList {the list of properties to become checked in reqInput}\n*/\nwhiteChecker(reqInput, whiteList) {\n  let keys = Object.keys(reqInput);\n  for (let key of keys) {\n    if (!whiteList.includes(key)) {\n      return false;\n    }\n  }\n return true;\n}\n```\n\n#### Random Generator\n\nReturns a random number between provided min and max numbers\n\n##### Code\n```javascript\n/**\n* @param        {!number}         min       {Minimum number to be GTE in output number}\n* @param        {!number}         max       {Maximum number to be LTE in output number}\n*/\ngenerateRandomNumber(min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n```\n\n### Converting an Array to a Keyed Object\n\nUsing reduce, you can convert an array of objects to an object keyed by a value within the objects, or the index of the object.\n\n##### Code\n```javascript\nfunction convertListToObject(list, keyBy) {\n  return list.reduce((newObject, listItem, index) => {\n    const key = keyBy ? listItem[keyBy] : index.toString();\n    return {\n      ...newObject,\n      [key]: listItem\n    };\n  }, {});\n}\n\nconst foods = [{ food: \'bacon\', id: \'1234 \'}, { food: \'eggs\', id: \'1345\' }, { food: \'toast\', id: \'1456\'}];\nconst clothes = [{ type: \'socks\' }, { type: \'jacket\' }, { type: \'shoes\' }];\n\nconsole.log(convertListToObject(foods, \'id\'));\n/*\n * {\n *   \'1345\': { food: \'eggs\', id: \'1345\' },\n *   \'1456\': { food: \'toast\', id: \'1456\' },\n *   \'1234 \': { food: \'bacon\', id: \'1234 \' }\n * }\n */\n\nconsole.log(convertListToObject(clothes));\n/*\n * {\n *   \'0\': { type: \'socks\' },\n *   \'1\': { type: \'jacket\' },\n *   \'2\': { type: \'shoes\' }\n * }\n */\n```\n\n#### Grab URL Query Parameters By Name\nGrabs the value of a url query parameter based on its name\n```javascript\n/**\n* @param      {!string}     name      {Parameter name to search for in the URL}\n* @param      {string}      url       {The url to check, if not the currently active URL}\n*/\ngetParameterByName(name, url = window.location.href) => {\n  name = name.replace(/[\\[\\]]/g, \'\\\\$&\');\n  const regex = new RegExp(\'[?&]\' + name + \'(=([^&#]*)|&|#|$)\'),\n        results = regex.exec(url);\n  if (!results) return null;\n  if (!results[2]) return \'\';\n  return decodeURIComponent(results[2].replace(/\\+/g, \' \'));\n}\n\n```\n\n#### Perform deep copy on an object\n\nCan be used to copy one object into another when an object has nested objects.\n\n````javascript\nfunction deepCopyObject(obj){\n  const keys = Object.keys(obj);\n  const newObject = {}\n\n  for(let i=0; i<keys.length; i++) {\n    const key = keys[i];\n    if ( typeof obj[key] === \'object\' ) {\n      newObject[key] = deepCopyObject(obj[key]);\n    } else {\n      newObject[key] = obj[key];\n    }\n  }\n  return newObject;\n}\n```\n---\n\n## Closures\n\n#### Why we use closures?\n\nThe concept of closure is used to restrict the analogy of functional scope to initialized the variable in functional scope and restrict the local variable to be excess from global. When a function created and passed around or returned from another function it carries a variables with it. Due to which, inner variable will come with all the necessary attachments. Hope this will give you a core concept of JavaScript closure.\n\n#### How we use closures?\n\nA closure is an inner function that has access to the outer (enclosing) function\u2019s variables \u2014 scope chain. The closure has three scope chains: it has access to its own scope (variables defined between its curly brackets), it has access to the outer function\u2019s variables, and it has access to the global variables\n\nLets move on the examples\n\n##### Code\n\nExample - 1\n\n```javascript\nfunction init() {\n  var name = "hello world"; // parent scope\n  function displayName() {\n    console.log(name); // child scope\n  }\n  displayName();\n}\ninit(); // hello world\n\n// name \u2014 is a local variable created by init function\n// displayName() \u2014 is the nested function.\n```\n\n#### Explanation\n\ninit() creates a local variable called name and a function calling displayName(). The displayName() function is an nested function and is only available within the body of the init() function. The displayName() function has no local variables of its own. However, because nested function have access to the variables of outer function, displayName() can access the variable name declared in the parent function.\n\nExample-2\n\n```javascript\nfunction createCounter() {\n  let counter = 0;\n  const myFunction = function() {\n    counter = counter + 1;\n    return counter;\n  };\n  return myFunction;\n}\nconst increment = createCounter();\nconst c1 = increment();\nconst c2 = increment();\nconst c3 = increment();\nconsole.log("example increment", c1, c2, c3); // 1, 2, 3\n```\n\n#### Explanation\n\nWhen file execute a code, A self calling function execute and initialized a local variable counter and function initialized in a myFunction variable. Self calling function return function definition of myFunction. Every time createCounter function called it will return an incremented value like:\n\n0+1 = 1\n1+1 = 2\n2+1 = 3\nand so on\u2026\n\n#### **IIFE (Immediately Invoked Function Expressions)**\n\nAn **IIFE** is a JavaScript function that runs as soon as it is defined. It is another example of how **Closures** work in Javascript.\n\nExample\n\n```javascript\nvar result = (function() {\n  var name = "Dev Snippets";\n  return name;\n})();\n// Immediately creates the output:\nconsole.log(result); // "Dev Snippets"\n```\n\nAssigning an IIFE to a variable will store the value that the function return and not the function definition. Also, variables declared inside IIFE **will not be accessible** outside elsewhere.\n\n### Conclusion:\n\nThe key to remember is that when a function gets declared, it contains a function definition and a closure. The closure is a collection of all the variables in scope at the time of creation of the function.\n\n---\n\n## Destructuring\n[Destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) allows the extraction of values from arrays and properties from objects into their own variables using a pretty terse, yet clear syntax.\n\n### Destructuring Arrays\nBefore destructuring, the way to access items in an array looks something like this:\n\n#### Code\n```javascript\nconst items = [\'car\', \'computer\', \'wallet\'];\nconst itemA = items[0];\nconst itemB = items[1];\nconst itemC = items[2];\n```\n\nWith destructuring, this becomes a one-liner:\n\n#### Code\n```javascript\nconst items = [\'car\', \'computer\', \'wallet\'];\nconst [ itemA, itemB, itemC ] = items; //assign individual variables to the corresponding item in the array\nconsole.log(itemB) //\'computer\'\n```\n\nYou can also choose to ignore items in an array by \'skipping\' its variable assigment:\n\n#### Code\n```javascript\nconst items = [\'car\', \'computer\', \'wallet\'];\nconst [ itemA, , itemC] = items; //\'computer\' is being ignored\nconsole.log(itemC) //\'wallet\'\n```\n\nAnd you can also choose to unpack only some values and assign the remaining to a variable using the [rest (...)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters) syntax:\n\n#### Code\n```javascript\nconst items = [\'car\', \'computer\', \'wallet\'];\nconst [ itemA, ...rest] = items; //extract first item and assign the remaining items to the \'rest\' variable\nconsole.log(itemA) //\'car\'\nconsole.log(rest) //[\'computer\', \'wallet\']\n```\n\n### Destructuring Objects\n\nDestructuring objects allows us to store its properties in variables like so:\n\n#### Code\n```javascript\nconst obj = {name: \'Foo\', age: 31};\nconst {name, age} = obj; //extract the \'name\' and \'age\' properties into variables. Notice how the variable names match the properties\nconsole.log(name) // \'Foo\'\nconsole.log(age) // 31\n```\n\nWe can also extract the properties and assign them to new variable names:\n\n#### Code\n```javascript\nconst obj = {name: \'Foo\', age: 31};\nconst {name: newName, age: newAge} = obj; //extract the \'name\' and \'age\' properties and assign them to new variables - newName and newAge - respectively\nconsole.log(newName) // \'Foo\'\nconsole.log(newAge) // 31\n```\n\nUsing the [rest (...)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters) syntax in Object destructuring:\n\n#### Code\n```javascript\nconst obj = {name: \'Foo\', age: 31, hobby: \'coding\'};\nconst {name, ...rest} = obj; //extract \'name\' property and assign the remaining properties to the \'rest\' variable\nconsole.log(name) // \'Foo\'\nconsole.log(rest) // {age: 31, hobby: \'coding\'}\n```\n')))}m.isMDXComponent=!0}}]);