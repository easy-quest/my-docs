"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[3525],{3905:function(n,e,t){t.d(e,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var l=r.createContext({}),u=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},p=function(n){var e=u(n.components);return r.createElement(l.Provider,{value:e},n.children)},c={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,a=n.originalType,l=n.parentName,p=s(n,["components","mdxType","originalType","parentName"]),d=u(t),m=i,f=d["".concat(l,".").concat(m)]||d[m]||c[m]||a;return t?r.createElement(f,o(o({ref:e},p),{},{components:t})):r.createElement(f,o({ref:e},p))}));function m(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var a=t.length,o=new Array(a);o[0]=d;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s.mdxType="string"==typeof n?n:i,o[1]=s;for(var u=2;u<a;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7620:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return p},default:function(){return d}});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),o=["components"],s={extends:"_layouts.documentation",section:"content",title:"Python",description:"Python Dev Snippets"},l="Python",u={unversionedId:"python/index",id:"python/index",title:"Python",description:"Python Dev Snippets",source:"@site/docs/python/index.md",sourceDirName:"python",slug:"/python/",permalink:"/my-docs/docs/python/",editUrl:"https://github.com/easy-quest/my-docs/edit/master/website/docs/python/index.md",tags:[],version:"current",frontMatter:{extends:"_layouts.documentation",section:"content",title:"Python",description:"Python Dev Snippets"},sidebar:"tutorialSidebar",previous:{title:"PHP - Tooling",permalink:"/my-docs/docs/php/tools"},next:{title:"R",permalink:"/my-docs/docs/r/"}},p=[{value:"Requirements",id:"requirements",children:[],level:2},{value:"Preventing user input during sleep.",id:"preventing-user-input-during-sleep",children:[],level:2},{value:"Python 3 f-strings: formatted string literals",id:"python-3-f-strings-formatted-string-literals",children:[{value:"Simple Syntax",id:"simple-syntax",children:[],level:4},{value:"Arbitrary Expressions",id:"arbitrary-expressions",children:[],level:4}],level:2},{value:"Two Matrix Multiplication",id:"two-matrix-multiplication",children:[],level:2},{value:"Useful Function - Force 2 Decimals",id:"useful-function---force-2-decimals",children:[],level:2},{value:"Useful Function - isPalindrome",id:"useful-function---ispalindrome",children:[],level:2},{value:"Useful Function -  Reversing A string",id:"useful-function----reversing-a-string",children:[],level:2},{value:"Useful Function -  Convert two lists into a dictionary",id:"useful-function----convert-two-lists-into-a-dictionary",children:[],level:2},{value:"Iteration",id:"iteration",children:[],level:2},{value:"For Loop",id:"for-loop",children:[],level:2},{value:"While Loop",id:"while-loop",children:[{value:"Printing ASCII value of character",id:"printing-ascii-value-of-character",children:[],level:3},{value:"Quick Math",id:"quick-math",children:[],level:3},{value:"Validate JSON",id:"validate-json",children:[],level:3},{value:"Generate Random Password",id:"generate-random-password",children:[{value:"Note :",id:"note-",children:[],level:4}],level:3}],level:2}],c={toc:p};function d(n){var e=n.components,t=(0,i.Z)(n,o);return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"python"},"Python"),(0,a.kt)("h2",{id:"requirements"},"Requirements"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Get the requirments to a file\npip freeze -r myrequiremets.txt\n\n\n# Installing the modules from the requirments file\npip install -r myrequirements.txt\n\n\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"preventing-user-input-during-sleep"},"Preventing user input during sleep."),(0,a.kt)("p",null,"This function disables all user input if used after a sleep function. As this uses the msvcrt module, this is only usable on Microsoft Windows."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import msvcrt\ndef disableInput():\n    while msvcrt.kbhit(): msvcrt.getwch()\n\n#example usage\ntime.sleep(5)\ndisableInput()\ninput("Press enter to continue...")\n\n')),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"python-3-f-strings-formatted-string-literals"},"Python 3 f-strings: formatted string literals"),(0,a.kt)("p",null,"The new f-Strings are string literals that start with an ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," at the beginning, and allow for expressions to be evaluated inside of curly braces. This is way easier to keep track of, especially with a long set of parameters and strings."),(0,a.kt)("h4",{id:"simple-syntax"},"Simple Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'name = "Sal"\nage = 33\nf"Hello, {name}. You are {age}"\n# \'Hello, Sal. You are 33.\'\n\n# Capital `F` is also valid\nF"Hello, {name}. You are {age}"\n# \'Hello, Sal. You are 33.\'\n\n# The output returned is a string, with single quotes, but you can wrap f-Strings in the print command, too.\nprint(f"{name} is {age} and that is great!")\n# Sal is 33 and that is great!\n')),(0,a.kt)("h4",{id:"arbitrary-expressions"},"Arbitrary Expressions"),(0,a.kt)("p",null,"Since f-Strings are evaluated at runtime, you can put any valid Python expression inside of them. This allows for some cool things to happen!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# The basics\nf"{2 * 21}"\n# \'42\'\n\n# You can call functions\ndef to_lowercase(input):\n    return input.lower()\n\nname = "Sal Mac"\nf"{to_lowercase(name)} loves to code."\n# \'sal mac loves to code.\'\n\n')),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"two-matrix-multiplication"},"Two Matrix Multiplication"),(0,a.kt)("p",null,"The following python snippet is for multiplication of two matrix. simply using for loops & list."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'r1 = int(input("Enter no. of rows of first matrix : "))\nc1 = int(input("Enter no. of columns of first matrix : "))\nr2 = int(input("Enter no. of rows of second matrix : "))\nc2 = int(input("Enter no. of columns of second matrix : "))\nC = []\nD = []\nA = []\n\nprint("\\nFirst Matrix :")\nfor i in range(r1):\n\n    temp1 = []\n    for i in range(c1):\n\n       temp1.append(float(input("Enter a value : "))) #values of first matrix\n    A.append(temp1)\n\nB = []\nprint("\\nSecond Matrix :")\nfor i in range(r2):\n\n    temp2 = []\n    for i in range(c2):\n\n       temp2.append(float(input("Enter a value : "))) #values of second matrix\n    B.append(temp2)\n\nprint("\\nFirst Matrix : ",A)\nprint("Second Matrix : ",B)\n\nfor i in range(r1):\n    for j in range(c2):\n        s= 0\n        for k in range(c1):\n            s = s+(A[i][k]*B[k][j]) # perform matrix multiplication\n        C.append(s)\n\n    D.append(C)\n    C = []\n\nprint("\\nFinal Matrix : ",D) # final matrix after multiplication\n')),(0,a.kt)("h2",{id:"useful-function---force-2-decimals"},"Useful Function - Force 2 Decimals"),(0,a.kt)("p",null,"This function returns the given integer as a string with 2 decimals points, useful for prices."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def forceTwoDecimals(integer):\n    if str(round(integer,2)) == str(round(integer,1)):\n        return str(integer)+"0"\n    else:\n        return str(integer)\n')),(0,a.kt)("h2",{id:"useful-function---ispalindrome"},"Useful Function - isPalindrome"),(0,a.kt)("p",null,"This function returns true if a given string is a palindrome"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def isPalindrome(str):\n    return str == str[::-1]\n")),(0,a.kt)("h2",{id:"useful-function----reversing-a-string"},"Useful Function -  Reversing A string"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'test_string="test string"\nreverse_test_string=test_string[::-1]\nprint(reverse_test_string)\n')),(0,a.kt)("p",null,'Output: "gnirts tset"'),(0,a.kt)("h2",{id:"useful-function----convert-two-lists-into-a-dictionary"},"Useful Function -  Convert two lists into a dictionary"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def convert_to_dictionary(keys, values):\n    return dict(zip(keys, values))\n\nkeys = [1, 2, 3]\nvalues = ['X', 'Y', 'Z']\nprint(convert_to_dictionary(keys, values)) # {1: 'X', 2: 'Y', 3: 'Z'}\n")),(0,a.kt)("h2",{id:"iteration"},"Iteration"),(0,a.kt)("h2",{id:"for-loop"},"For Loop"),(0,a.kt)("p",null,"The following example uses a for loop to find the number of occurrences of a specified sub_string. In below example, the number returned would be 2."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def count_substring(string, sub_string):\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(sub_string):\n            count += 1\n    return count\ncount_substring('hello', 'l')\n")),(0,a.kt)("h2",{id:"while-loop"},"While Loop"),(0,a.kt)("p",null,"The following example uses a while loop to find the factorial on an integer n."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def factorial(n):\n    result = 1\n    while(n >= 1):\n        result = result * n\n        n = n - 1\n    return result\nfactorial(5)\n")),(0,a.kt)("h3",{id:"printing-ascii-value-of-character"},"Printing ASCII value of character"),(0,a.kt)("p",null,"Python program to print ASCII Value of Character "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"  \nc = '*'\nprint(\"The ASCII value of '\" + c + \"' is\", ord(c))\n\nOUTPUT:The ASCII value of g is 42\n\n")),(0,a.kt)("h3",{id:"quick-math"},"Quick Math"),(0,a.kt)("p",null,"This script is used to add (or multiply or divide or subtract) multiple numbers in a single command line."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\nimport math\nimport sys\n\nif len(sys.argv) < 4:\n    print("Usage: quickmath.py <add|mul|div|sub|avg> <num01> <num02> [num03..num99]")\n    exit(1)\n\nw_addition = {"+", "add", "addition", "plus"}\nw_subtraction = {"-", "sub", "subtraction", "minus"}\nw_multiply = {"*", "x", "mul", "multiply"}\nw_divide = {"/", "div", "divide"}\n\nfor counter in range(2, len(sys.argv)):\n    if not sys.argv[counter].isdigit():\n        print("Usage: quickmath.py <add|mul|div|sub|avg> <num01> <num02> [num03..num99]")\n        exit(1)\n\nresult = float(sys.argv[2])\n\nif sys.argv[1] in w_addition:\n    for counter in range(3, len(sys.argv)):\n        result = result + float(sys.argv[counter])\nelif sys.argv[1] in w_subtraction:\n    for counter in range(3, len(sys.argv)):\n        result = result - float(sys.argv[counter])\nelif sys.argv[1] in w_multiply:\n    for counter in range(3, len(sys.argv)):\n        result = result * float(sys.argv[counter])\nelif sys.argv[1] in w_divide:\n    for counter in range(3, len(sys.argv)):\n        result = result / float(sys.argv[counter])\nelse:\n    print("Usage: quickmath.py <add|mul|div|sub|avg> <num01> <num02> [num03..num99]")\n    exit(1)\n\nprint(str(result))\n')),(0,a.kt)("h3",{id:"validate-json"},"Validate JSON"),(0,a.kt)("p",null,"This script will read a file and either pass the file as being a valid JSON file, or die a horrible death."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'#!/usr/bin/env python3\n\nimport os\nimport sys\nimport json\n\nif len(sys.argv) > 1:\n    if os.path.exists(sys.argv[1]):\n        file = open(sys.argv[1], "r")\n        json.load(file)\n        file.close()\n        print("Validate JSON!")\n    else:\n        print(sys.argv[1] + " not found")\nelse:\n    print("Usage: checkjson.py <file>")\n')),(0,a.kt)("h3",{id:"generate-random-password"},"Generate Random Password"),(0,a.kt)("p",null,"This script will generate random password with following rules:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"6-20 characters"),(0,a.kt)("li",{parentName:"ol"},"at least one uppercase character"),(0,a.kt)("li",{parentName:"ol"},"at least one lowercase character"),(0,a.kt)("li",{parentName:"ol"},"at least one digit"),(0,a.kt)("li",{parentName:"ol"},"at least one special character (!, @, #, $, %, ^, &, *)"),(0,a.kt)("li",{parentName:"ol"},"no more than 2 characters repeating consecutively ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import random\n\nLOWERCASE_CHARS = tuple(map(chr, xrange(ord('a'), ord('z')+1)))\nUPPERCASE_CHARS = tuple(map(chr, xrange(ord('A'), ord('Z')+1)))\nDIGITS = tuple(map(str, range(0, 10)))\nSPECIALS = ('!', '@', '#', '$', '%', '^', '&', '*')\n\nSEQUENCE = (LOWERCASE_CHARS,\n            UPPERCASE_CHARS,\n            DIGITS,\n            SPECIALS,\n            )\n\ndef generate_random_password(total, sequences):\n    r = _generate_random_number_for_each_sequence(total, len(sequences))\n\n    password = []\n    for (population, k) in zip(sequences, r):\n        n = 0\n        while n < k:\n            position = random.randint(0, len(population)-1)\n            password += population[position]\n            n += 1\n    random.shuffle(password)\n    \n    while _is_repeating(password):\n        random.shuffle(password)\n        \n    return ''.join(password)\n\ndef _generate_random_number_for_each_sequence(total, sequence_number):\n    \"\"\" Generate random sequence with numbers (greater than 0).\n        The number of items equals to 'sequence_number' and\n        the total number of items equals to 'total'\n    \"\"\"\n    current_total = 0\n    r = []\n    for n in range(sequence_number-1, 0, -1):\n        current = random.randint(1, total - current_total - n)\n        current_total += current\n        r.append(current)\n    r.append(total - sum(r))\n    random.shuffle(r)\n\n    return r\n\ndef _is_repeating(password):\n    \"\"\" Check if there is any 2 characters repeating consecutively \"\"\"\n    n = 1\n    while n < len(password):\n        if password[n] == password[n-1]:\n            return True\n        n += 1\n    return False\n\nif __name__ == '__main__':\n    print generate_random_password(random.randint(6, 30), SEQUENCE)\n")),(0,a.kt)("h4",{id:"note-"},"Note :"),(0,a.kt)("p",null,"As a python developer, be careful with Python indentation. sometimes even if lines look visually indented, from python perspective they maybe are not indented & causes errors. IDEs like PyCharm are useful for debugging and avoiding common errors such as this."))}d.isMDXComponent=!0}}]);