"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[3120],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(r),m=i,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return r?n.createElement(g,a(a({ref:t},p),{},{components:r})):n.createElement(g,a({ref:t},p))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5944:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var n=r(7462),i=r(3366),o=(r(7294),r(3905)),a=["components"],l={title:"Git",description:"Git Dev Snippets",extends:"_layouts.documentation",section:"content"},s="Git",c={unversionedId:"git/workflow",id:"git/workflow",title:"Git",description:"Git Dev Snippets",source:"@site/docs/git/workflow.md",sourceDirName:"git",slug:"/git/workflow",permalink:"/my-docs/docs/git/workflow",editUrl:"https://github.com/easy-quest/my-docs/edit/master/website/docs/git/workflow.md",tags:[],version:"current",frontMatter:{title:"Git",description:"Git Dev Snippets",extends:"_layouts.documentation",section:"content"},sidebar:"tutorialSidebar",previous:{title:"Git",permalink:"/my-docs/docs/git/stash"},next:{title:"Go",permalink:"/my-docs/docs/go/"}},p=[{value:"Create a Directory",id:"create-a-directory",children:[],level:3},{value:"Create Empty File",id:"create-empty-file",children:[],level:3},{value:"Initialize Git",id:"initialize-git",children:[],level:3},{value:"Show the working tree status",id:"show-the-working-tree-status",children:[],level:3},{value:"Add file contents to the index",id:"add-file-contents-to-the-index",children:[],level:3},{value:"Record changes to the repository",id:"record-changes-to-the-repository",children:[],level:3},{value:"Rewrite the most recent commit message",id:"rewrite-the-most-recent-commit-message",children:[],level:3}],u={toc:p};function d(e){var t=e.components,r=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"git"},"Git"),(0,o.kt)("h3",{id:"create-a-directory"},"Create a Directory"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir <folder-name>\n")),(0,o.kt)("h3",{id:"create-empty-file"},"Create Empty File"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"touch <file-name-with-type>\n")),(0,o.kt)("h3",{id:"initialize-git"},"Initialize Git"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git init\n")),(0,o.kt)("h3",{id:"show-the-working-tree-status"},"Show the working tree status"),(0,o.kt)("p",null,"Check the status of the repository"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git status\n")),(0,o.kt)("h3",{id:"add-file-contents-to-the-index"},"Add file contents to the index"),(0,o.kt)("p",null,"Prepare the content staged for the next commit."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git add .\n")),(0,o.kt)("p",null,"or"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git add -A\n")),(0,o.kt)("p",null,"A stands for All"),(0,o.kt)("h3",{id:"record-changes-to-the-repository"},"Record changes to the repository"),(0,o.kt)("p",null,"Use the given ",(0,o.kt)("inlineCode",{parentName:"p"},"<msg>")," as the commit message. If multiple -m options are given, their values are concatenated as separate paragraphs."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'git commit -m "your commit message"\n')),(0,o.kt)("h3",{id:"rewrite-the-most-recent-commit-message"},"Rewrite the most recent commit message"),(0,o.kt)("p",null,"Did you mess up with your ",(0,o.kt)("inlineCode",{parentName:"p"},"<msg>")," and need to update it before pushing it upstream?"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git commit --amend\n")),(0,o.kt)("p",null,"Then press ",(0,o.kt)("strong",{parentName:"p"},"Enter")," -> this will open your old message in your default text editor, edit the message, and save the commit."))}d.isMDXComponent=!0}}]);