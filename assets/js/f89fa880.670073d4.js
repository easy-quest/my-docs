"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[5087],{3905:function(e,r,a){a.d(r,{Zo:function(){return p},kt:function(){return d}});var n=a(7294);function t(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function i(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?i(Object(a),!0).forEach((function(r){t(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function s(e,r){if(null==e)return{};var a,n,t=function(e,r){if(null==e)return{};var a,n,t={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],r.indexOf(a)>=0||(t[a]=e[a]);return t}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var o=n.createContext({}),c=function(e){var r=n.useContext(o),a=r;return e&&(a="function"==typeof e?e(r):l(l({},r),e)),a},p=function(e){var r=c(e.components);return n.createElement(o.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},y=n.forwardRef((function(e,r){var a=e.components,t=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),y=c(a),d=t,m=y["".concat(o,".").concat(d)]||y[d]||u[d]||i;return a?n.createElement(m,l(l({ref:r},p),{},{components:a})):n.createElement(m,l({ref:r},p))}));function d(e,r){var a=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var i=a.length,l=new Array(i);l[0]=y;var s={};for(var o in r)hasOwnProperty.call(r,o)&&(s[o]=r[o]);s.originalType=e,s.mdxType="string"==typeof e?e:t,l[1]=s;for(var c=2;c<i;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}y.displayName="MDXCreateElement"},2898:function(e,r,a){a.r(r),a.d(r,{frontMatter:function(){return s},contentTitle:function(){return o},metadata:function(){return c},toc:function(){return p},default:function(){return y}});var n=a(7462),t=a(3366),i=(a(7294),a(3905)),l=["components"],s={title:"PHP - Arrays",description:"PHP Arrays Dev Snippets",extends:"_layouts.documentation",section:"content"},o="Arrays",c={unversionedId:"php/arrays",id:"php/arrays",title:"PHP - Arrays",description:"PHP Arrays Dev Snippets",source:"@site/docs/php/arrays.md",sourceDirName:"php",slug:"/php/arrays",permalink:"/my-docs/docs/php/arrays",editUrl:"https://github.com/easy-quest/my-docs/edit/master/website/docs/php/arrays.md",tags:[],version:"current",frontMatter:{title:"PHP - Arrays",description:"PHP Arrays Dev Snippets",extends:"_layouts.documentation",section:"content"},sidebar:"tutorialSidebar",previous:{title:"Kubernetes snippets",permalink:"/my-docs/docs/kubernetes/"},next:{title:"PHP - Connection",permalink:"/my-docs/docs/php/connection"}},p=[{value:"Destructure arrays in PHP",id:"destructure-arrays-in-php",children:[],level:3},{value:"Skipping elements in an array in PHP",id:"skipping-elements-in-an-array-in-php",children:[],level:3},{value:"Non-numerical keys in PHP",id:"non-numerical-keys-in-php",children:[],level:3},{value:"Length of an array",id:"length-of-an-array",children:[],level:3},{value:"Sort an array in Ascending Order",id:"sort-an-array-in-ascending-order",children:[],level:3},{value:"Sort an array in Descending Order",id:"sort-an-array-in-descending-order",children:[],level:3},{value:"Multi-dimensional arrays",id:"multi-dimensional-arrays",children:[],level:3},{value:"Multi-dimensional associative arrays",id:"multi-dimensional-associative-arrays",children:[],level:3},{value:"Merge Arrays",id:"merge-arrays",children:[],level:3},{value:"Get Array Keys",id:"get-array-keys",children:[],level:3},{value:"Get Array Values",id:"get-array-values",children:[],level:3},{value:"Checks if array has a value",id:"checks-if-array-has-a-value",children:[],level:3},{value:"Filter an array",id:"filter-an-array",children:[],level:3},{value:"Map a multidimensional array into an associative array",id:"map-a-multidimensional-array-into-an-associative-array",children:[],level:3},{value:"Get an array from a JSON string",id:"get-an-array-from-a-json-string",children:[],level:3}],u={toc:p};function y(e){var r=e.components,a=(0,t.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},u,a,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"arrays"},"Arrays"),(0,i.kt)("p",null,"Create new array in PHP"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"// Usage\n\n$array = []; // recommended\n$array = array(); //array() function\n$array = ['foo' => 'bar']; \n")),(0,i.kt)("h3",{id:"destructure-arrays-in-php"},"Destructure arrays in PHP"),(0,i.kt)("p",null,"In Javascript, we loved the destructuring assignments in Arrays, in PHP we can achieve it via"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$array = [1, 2, 3]; \n\n// Using the list syntax:\nlist($a, $b, $c) = $array;\n\n// Or the shorthand syntax:\n[$a, $b, $c] = $array;\n\n// $a = 1\n// $b = 2\n// $c = 3\n")),(0,i.kt)("h3",{id:"skipping-elements-in-an-array-in-php"},"Skipping elements in an array in PHP"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$array = [1, 2, 3]; \n\n[, , $c] = $array;\n\n// $c = 3\n")),(0,i.kt)("h3",{id:"non-numerical-keys-in-php"},"Non-numerical keys in PHP"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$array = [\n    'a' => 1,\n    'b' => 2,\n    'c' => 3,\n];\n\n['c' => $c, 'a' => $a] = $array;\n\n")),(0,i.kt)("h3",{id:"length-of-an-array"},"Length of an array"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'$array = ["Car", "Bike", "Train"];\n\ncount($array); //count() function\n\n')),(0,i.kt)("h3",{id:"sort-an-array-in-ascending-order"},"Sort an array in Ascending Order"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'$array = ["Train", "Car", "Bike"];\n\nsort($array); //sort() function\n\n')),(0,i.kt)("h3",{id:"sort-an-array-in-descending-order"},"Sort an array in Descending Order"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'$array = ["Car", "Bike", "Train"];\n\nrsort($array); //rsort() function\n')),(0,i.kt)("h3",{id:"multi-dimensional-arrays"},"Multi-dimensional arrays"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$students = array(\n    //Student Name, Age and Behaviour\n    array('Jack', 14, 'Good'),\n    array('Mary', 13, 'Good'),\n);\n//print_r($students)\n")),(0,i.kt)("h3",{id:"multi-dimensional-associative-arrays"},"Multi-dimensional associative arrays"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'$marks = array(\n    //Name of student is key\n    "Jack" => array(\n        //key-value pairs\n        "Maths" => 95,\n        "Science" => 84,\n        "History" => 48,\n    ),\n\n    "Mary" => array(\n        "Maths" => 78,\n        "Science" => 76,\n        "History" => 64,\n    ),\n);\n//print_r($marks)\n')),(0,i.kt)("h3",{id:"merge-arrays"},"Merge Arrays"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$colorsOne = ['Green', 'Black', 'Blue'];\n$colorsTwo = ['Red', 'Yellow', 'Purple'];\n$allColors = array_merge( $colorsOne, $colorsTwo);\n\n//print_r($allColors)\n")),(0,i.kt)("h3",{id:"get-array-keys"},"Get Array Keys"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$cars = [\n    'name' => 'Gol',\n    'maker' => 'Volkswagen'\n];\n\n$keys = array_keys( $cars );\n//print_r($keys)\n")),(0,i.kt)("h3",{id:"get-array-values"},"Get Array Values"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$cars = [\n    'name' => 'Gol',\n    'maker' => 'Volkswagen'\n];\n\n$values = array_values( $cars );\n//print_r($values)\n")),(0,i.kt)("h3",{id:"checks-if-array-has-a-value"},"Checks if array has a value"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$carsOnGarage = ['Ferrari', 'Camaro', 'Mustang', 'Dodge Dart', 'Ford Torino Cobra'];\n$newCar = 'Toyota Prius';\n\nif( in_array( $newCar, $carsOnGarage )){\n    echo \"$newCar is on Garage\";\n}else{\n    echo \"$newCar is not on Garage\";\n}\n//result= Toyota Prius is not on Garage\n")),(0,i.kt)("h3",{id:"filter-an-array"},"Filter an array"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$numbers = [1,2,3,4,5,6,7,8,9,10];\n\n$oddNumbers = array_filter( $numbers, function( $arrayElement){\n    return $arrayElement % 2 === 0;\n});\n\nprint_r( $oddNumbers )\n/* Array\n(\n    [1] => 2\n    [3] => 4\n    [5] => 6\n    [7] => 8\n    [9] => 10\n) */\n")),(0,i.kt)("h3",{id:"map-a-multidimensional-array-into-an-associative-array"},"Map a multidimensional array into an associative array"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$multi = [['key' => 'height', 'value' => '1080'],['key' => 'width', 'value' => '1920']];\n\n$assoc = array_columns($multi, 'value', 'key');\n\n/*Array\n(\n    'height' => '1080'\n    'width' => '1920'\n)*/\n")),(0,i.kt)("h3",{id:"get-an-array-from-a-json-string"},"Get an array from a JSON string"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'$jsonString = \'{\n    "apple": "red",\n    "orange": "orange",\n    "banana": "yellow"\n}\';\n\n$array = json_decode( $jsonString, true );\n\nprint_r( $array );\n/*\nArray\n(\n    [apple] => red\n    [orange] => orange\n    [banana] => yellow\n)\n*/\n')))}y.isMDXComponent=!0}}]);