"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[2844],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),h=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=h(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},b=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=h(n),m=r,p=b["".concat(i,".").concat(m)]||b[m]||u[m]||c;return n?a.createElement(p,o(o({ref:t},s),{},{components:n})):a.createElement(p,o({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,o=new Array(c);o[0]=b;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var h=2;h<c;h++)o[h]=n[h];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},7546:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return h},toc:function(){return s},default:function(){return b}});var a=n(7462),r=n(3366),c=(n(7294),n(3905)),o=["components"],l={title:"Git",description:"Git Dev Snippets",extends:"_layouts.documentation",section:"content"},i="Git",h={unversionedId:"git/branch",id:"git/branch",title:"Git",description:"Git Dev Snippets",source:"@site/docs/git/branch.md",sourceDirName:"git",slug:"/git/branch",permalink:"/my-docs/docs/git/branch",editUrl:"https://github.com/easy-quest/my-docs/edit/master/website/docs/git/branch.md",tags:[],version:"current",frontMatter:{title:"Git",description:"Git Dev Snippets",extends:"_layouts.documentation",section:"content"},sidebar:"tutorialSidebar",previous:{title:"Dcoker Swarm",permalink:"/my-docs/docs/docker-swarm/"},next:{title:"Git",permalink:"/my-docs/docs/git/repository"}},s=[{value:"Branches",id:"branches",children:[{value:"List branches",id:"list-branches",children:[],level:3},{value:"Compare branches",id:"compare-branches",children:[],level:3},{value:"Create a new branch",id:"create-a-new-branch",children:[],level:3},{value:"Switch to a branch",id:"switch-to-a-branch",children:[],level:3},{value:"Work on remote branch",id:"work-on-remote-branch",children:[],level:3},{value:"Merge a branch",id:"merge-a-branch",children:[],level:3},{value:"Push local branch to remote",id:"push-local-branch-to-remote",children:[],level:3},{value:"Rebase a branch",id:"rebase-a-branch",children:[],level:3},{value:"Delete a branch",id:"delete-a-branch",children:[],level:3},{value:"Delete a remote branch",id:"delete-a-remote-branch",children:[],level:3}],level:2}],u={toc:s};function b(e){var t=e.components,n=(0,r.Z)(e,o);return(0,c.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"git"},"Git"),(0,c.kt)("h2",{id:"branches"},"Branches"),(0,c.kt)("h3",{id:"list-branches"},"List branches"),(0,c.kt)("p",null,"List existing branches. Current branch will be highlighted with an asterisk."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"git branch --list\n")),(0,c.kt)("p",null,"List existing remote branches."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"git branch -r\n# or\ngit branch --remote\n")),(0,c.kt)("p",null,"List all existing branches (local and remote)."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"git branch -a\n# or\ngit branch --all\n")),(0,c.kt)("h3",{id:"compare-branches"},"Compare branches"),(0,c.kt)("p",null,"Lists the differences between two different branches."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"git diff branchname1 branchname2\n")),(0,c.kt)("h3",{id:"create-a-new-branch"},"Create a new branch"),(0,c.kt)("p",null,"Creates a new branch and switches to it"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout -b branchname\n")),(0,c.kt)("p",null,"Just create a new branch"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"git branch branchname\n")),(0,c.kt)("h3",{id:"switch-to-a-branch"},"Switch to a branch"),(0,c.kt)("p",null,"Changes to a branch based on name"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout branchname\n")),(0,c.kt)("h3",{id:"work-on-remote-branch"},"Work on remote branch"),(0,c.kt)("p",null,"Clones a remote branch locally, and sets it up to track the remote branch"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout --track remote-name/branch-name\n")),(0,c.kt)("p",null,"or equivalently"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout -b branch-name remote-name/branch-name\n")),(0,c.kt)("h3",{id:"merge-a-branch"},"Merge a branch"),(0,c.kt)("p",null,"To merge a branch into another, you need to do the following"),(0,c.kt)("ol",null,(0,c.kt)("li",{parentName:"ol"},(0,c.kt)("strong",{parentName:"li"},"Checkout")," the branch/master you wish to merge ",(0,c.kt)("em",{parentName:"li"},"into")),(0,c.kt)("li",{parentName:"ol"},"Merge the required branch into this one")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout branchname\ngit merge my-new-function\n")),(0,c.kt)("h3",{id:"push-local-branch-to-remote"},"Push local branch to remote"),(0,c.kt)("p",null,"Creates a new branch locally and then on a remote"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout -b branch-name\ngit push remote-name branch-name\n")),(0,c.kt)("h3",{id:"rebase-a-branch"},"Rebase a branch"),(0,c.kt)("p",null,"Rebasing is another way to integrate changes from one branch to another. It will move the commits of that branch to a new base commit.\nTo rebase a branch into another, you need to do the following"),(0,c.kt)("ol",null,(0,c.kt)("li",{parentName:"ol"},"Checkout to the branch you wish to rebase"),(0,c.kt)("li",{parentName:"ol"},"Rebase this branch to the required branch.")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout new-branch\ngit rebase master\n")),(0,c.kt)("p",null,"This will change the base of new-branch to the latest commit in master."),(0,c.kt)("h3",{id:"delete-a-branch"},"Delete a branch"),(0,c.kt)("p",null,"Deletes a branch thats no longer required (eg after a merge)"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"git branch -d branchname\n")),(0,c.kt)("h3",{id:"delete-a-remote-branch"},"Delete a remote branch"),(0,c.kt)("p",null,"Deletes a remote branch, e.g a branch in your GitHub repo. Note that you'll still have to delete the local branch using the above snippet, if you want to completely remove the branch."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"git push -d remote-name branch-name\n")),(0,c.kt)("p",null,"Where remote-name(generally 'origin' for GitHub) is the name of the remote where you want to delete the branch from, and branch-name is the branch you wish to delete."))}b.isMDXComponent=!0}}]);