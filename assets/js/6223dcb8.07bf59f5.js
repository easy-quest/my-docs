"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[124],{3905:function(r,e,t){t.d(e,{Zo:function(){return c},kt:function(){return d}});var n=t(7294);function a(r,e,t){return e in r?Object.defineProperty(r,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):r[e]=t,r}function o(r,e){var t=Object.keys(r);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(r);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),t.push.apply(t,n)}return t}function i(r){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){a(r,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(r,e,Object.getOwnPropertyDescriptor(t,e))}))}return r}function u(r,e){if(null==r)return{};var t,n,a=function(r,e){if(null==r)return{};var t,n,a={},o=Object.keys(r);for(n=0;n<o.length;n++)t=o[n],e.indexOf(t)>=0||(a[t]=r[t]);return a}(r,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(r);for(n=0;n<o.length;n++)t=o[n],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(r,t)&&(a[t]=r[t])}return a}var s=n.createContext({}),l=function(r){var e=n.useContext(s),t=e;return r&&(t="function"==typeof r?r(e):i(i({},e),r)),t},c=function(r){var e=l(r.components);return n.createElement(s.Provider,{value:e},r.children)},p={inlineCode:"code",wrapper:function(r){var e=r.children;return n.createElement(n.Fragment,{},e)}},y=n.forwardRef((function(r,e){var t=r.components,a=r.mdxType,o=r.originalType,s=r.parentName,c=u(r,["components","mdxType","originalType","parentName"]),y=l(t),d=a,b=y["".concat(s,".").concat(d)]||y[d]||p[d]||o;return t?n.createElement(b,i(i({ref:e},c),{},{components:t})):n.createElement(b,i({ref:e},c))}));function d(r,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof r||a){var o=t.length,i=new Array(o);i[0]=y;var u={};for(var s in e)hasOwnProperty.call(e,s)&&(u[s]=e[s]);u.originalType=r,u.mdxType="string"==typeof r?r:a,i[1]=u;for(var l=2;l<o;l++)i[l]=t[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},7415:function(r,e,t){t.r(e),t.d(e,{frontMatter:function(){return u},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return c},default:function(){return y}});var n=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],u={extends:"_layouts.documentation",section:"content",title:"Ruby Array",description:"Ruby Array Dev Snippets"},s="Ruby",l={unversionedId:"ruby/arrays",id:"ruby/arrays",title:"Ruby Array",description:"Ruby Array Dev Snippets",source:"@site/docs/ruby/arrays.md",sourceDirName:"ruby",slug:"/ruby/arrays",permalink:"/my-docs/docs/ruby/arrays",editUrl:"https://github.com/easy-quest/my-docs/edit/master/website/docs/ruby/arrays.md",tags:[],version:"current",frontMatter:{extends:"_layouts.documentation",section:"content",title:"Ruby Array",description:"Ruby Array Dev Snippets"},sidebar:"tutorialSidebar",previous:{title:"REST API",permalink:"/my-docs/docs/restapi/"},next:{title:"Ruby Iteration",permalink:"/my-docs/docs/ruby/iterations"}},c=[{value:"Array",id:"array",children:[{value:"Sorting Numbers",id:"sorting-numbers",children:[],level:3},{value:"Sorting Strings",id:"sorting-strings",children:[],level:3},{value:"sort_by method",id:"sort_by-method",children:[],level:3},{value:"Flatten an array of arrays",id:"flatten-an-array-of-arrays",children:[],level:3},{value:"Subtract two arrays",id:"subtract-two-arrays",children:[],level:3}],level:2}],p={toc:c};function y(r){var e=r.components,t=(0,a.Z)(r,i);return(0,o.kt)("wrapper",(0,n.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"ruby"},"Ruby"),(0,o.kt)("h2",{id:"array"},"Array"),(0,o.kt)("h3",{id:"sorting-numbers"},"Sorting Numbers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"[1, 25, 5, 15, 10, 20].sort\n# => [1, 5, 10, 15, 20, 25]\n")),(0,o.kt)("h3",{id:"sorting-strings"},"Sorting Strings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"['Banana', 'Apple', 'Mango', 'Passionfruit', 'Pineapple'].sort\n# => [\"Apple\", \"Banana\", \"Mango\", \"Passionfruit\", \"Pineapple\"]\n")),(0,o.kt)("h3",{id:"sort_by-method"},"sort_by method"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"arr = ['Banana', 'Apple', 'Mango', 'Passionfruit', 'Pineapple']\narr.sort_by{ |word| word.length }\n# => [\"Apple\", \"Mango\", \"Banana\", \"Pineapple\", \"Passionfruit\"]\n")),(0,o.kt)("h3",{id:"flatten-an-array-of-arrays"},"Flatten an array of arrays"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"arr = [1, 2, [3, 4, [5, 6,], 7, 8]\nprint arr.flatten\n# => [1, 2, 3, 4, 5, 6, 7, 8]\n")),(0,o.kt)("h3",{id:"subtract-two-arrays"},"Subtract two arrays"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"arr1 = [1, 2, 3, 4]\narr2 = [3, 4, 5, 6]\nputs arr1 - arr2\n# => [1, 2]\nputs arr2 - arr1\n# => [5, 6]\n")),(0,o.kt)("hr",null))}y.isMDXComponent=!0}}]);