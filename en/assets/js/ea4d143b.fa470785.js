"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[2614],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return h}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),h=a,m=p["".concat(s,".").concat(h)]||p[h]||d[h]||o;return t?r.createElement(m,i(i({ref:n},u),{},{components:t})):r.createElement(m,i({ref:n},u))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2334:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],l={extends:"_layouts.documentation",section:"content",title:"Bash Snippets",description:"Bash Snippets"},s=void 0,c={unversionedId:"bash/index",id:"bash/index",title:"Bash Snippets",description:"Bash Snippets",source:"@site/docs/bash/index.md",sourceDirName:"bash",slug:"/bash/",permalink:"/my-docs/en/docs/bash/",editUrl:"https://github.com/easy-quest/my-docs/edit/master/website/docs/bash/index.md",tags:[],version:"current",frontMatter:{extends:"_layouts.documentation",section:"content",title:"Bash Snippets",description:"Bash Snippets"},sidebar:"tutorialSidebar",previous:{title:"\u041b\u0443\u0447\u0448\u0438\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0432\u0430\u0448\u0438\u0445 \u0442\u043e\u0447\u0435\u0447\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432: \u0433\u043e\u043b\u044b\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 Git",permalink:"/my-docs/en/docs/DotFiles/First"},next:{title:"Bash - Key Bindings",permalink:"/my-docs/en/docs/bash/keybindings"}},u=[{value:"Bash",id:"bash",children:[{value:"Show Shell",id:"show-shell",children:[],level:3},{value:"Avaiable Shell",id:"avaiable-shell",children:[],level:3},{value:"Where I am?",id:"where-i-am",children:[],level:3},{value:"Variables",id:"variables",children:[],level:3},{value:"Conditional",id:"conditional",children:[],level:3},{value:"Functions",id:"functions",children:[],level:3},{value:"Conditional Execution",id:"conditional-execution",children:[],level:3}],level:2},{value:"Delete Folder and Files",id:"delete-folder-and-files",children:[],level:2},{value:"Find Processes By Port In Use",id:"find-processes-by-port-in-use",children:[],level:2}],d={toc:u};function p(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"bash"},"Bash"),(0,o.kt)("h3",{id:"show-shell"},"Show Shell"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"echo $0\necho $SHELL\n")),(0,o.kt)("h3",{id:"avaiable-shell"},"Avaiable Shell"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cat /etc/shells\n")),(0,o.kt)("h3",{id:"where-i-am"},"Where I am?"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'echo "You\'re: $(pwd)"\necho "You\'re: `pwd`"\n')),(0,o.kt)("h3",{id:"variables"},"Variables"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'NAME="Your Name"\necho $NAME\necho "$NAME"\necho "${NAME} :)"\n')),(0,o.kt)("h3",{id:"conditional"},"Conditional"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'git commit && git push\ngit commit || echo "Commit failed"\n')),(0,o.kt)("h3",{id:"functions"},"Functions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'get_name() {\n  echo "Some Name"\n}\n\necho "You are $(get_name)"\n')),(0,o.kt)("h3",{id:"conditional-execution"},"Conditional Execution"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'str="hi"\nif [[ -z "$str" ]]; then\n  echo "Is empty"\nelif [[ -n "$str" ]]; then\n  echo "Is not empty"\nfi\n')),(0,o.kt)("h2",{id:"delete-folder-and-files"},"Delete Folder and Files"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# non-empty (deletes folder and everything inside)\nrm -rf folder_name\n\n# empty folder or a file\nrm folder_name\nrm file_name\n")),(0,o.kt)("h2",{id:"find-processes-by-port-in-use"},"Find Processes By Port In Use"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# useful when you need to kill a process running on background and can't Ctrl+C it, for example a dev build of an app using localhost\n\n# list process running on port e.g. 3000\nlsof -i:port_number\n\n# kill any process running on port\nkill $(lsof -t -i:port_number)\n\n# kill single process running on port (first command returns PID)\nkill PID_number\n\n")))}p.isMDXComponent=!0}}]);