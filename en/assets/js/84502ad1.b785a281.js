"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[7238],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(t),m=o,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||a;return t?r.createElement(f,l(l({ref:n},u),{},{components:t})):r.createElement(f,l({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=p;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2435:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return u},default:function(){return p}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),l=["components"],i={title:"Go",extends:"_layouts.documentation",description:"GOlang Dev Snippets",section:"content"},c="Go",s={unversionedId:"go/index",id:"go/index",title:"Go",description:"GOlang Dev Snippets",source:"@site/docs/go/index.md",sourceDirName:"go",slug:"/go/",permalink:"/my-docs/en/docs/go/",editUrl:"https://github.com/easy-quest/my-docs/edit/master/website/docs/go/index.md",tags:[],version:"current",frontMatter:{title:"Go",extends:"_layouts.documentation",description:"GOlang Dev Snippets",section:"content"},sidebar:"tutorialSidebar",previous:{title:"Git",permalink:"/my-docs/en/docs/git/workflow"},next:{title:"Java",permalink:"/my-docs/en/docs/java/"}},u=[{value:"Hello Word",id:"hello-word",children:[],level:3},{value:"Variables",id:"variables",children:[{value:"Strings",id:"strings",children:[],level:4},{value:"Numbers",id:"numbers",children:[],level:4},{value:"Arrays",id:"arrays",children:[],level:4},{value:"Pointers",id:"pointers",children:[],level:4}],level:3},{value:"Flow Control",id:"flow-control",children:[{value:"Conditional",id:"conditional",children:[],level:4},{value:"Statements in if",id:"statements-in-if",children:[],level:4},{value:"Switch",id:"switch",children:[],level:4},{value:"For-Range loop",id:"for-range-loop",children:[],level:4},{value:"For loop",id:"for-loop",children:[],level:4}],level:3}],d={toc:u};function p(e){var n=e.components,t=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"go"},"Go"),(0,a.kt)("h3",{id:"hello-word"},"Hello Word"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport "fmt"\n\nfunc main() {\n  message := greetMe("world")\n  fmt.Println(message)\n}\n\nfunc greetMe(name string) string {\n  return "Hello, " + name + "!"\n}\n')),(0,a.kt)("h3",{id:"variables"},"Variables"),(0,a.kt)("h4",{id:"strings"},"Strings"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'str := "Hello"\nstr := `Multiline\n  string`\n')),(0,a.kt)("h4",{id:"numbers"},"Numbers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"num := 3          // int\nnum := 3.         // float64\nnum := 3 + 4i     // complex128\nnum := byte('a')  // byte (alias for uint8)\n")),(0,a.kt)("h4",{id:"arrays"},"Arrays"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// var numbers [5]int\nnumbers := [...]int{0, 0, 0, 0, 0}\n")),(0,a.kt)("h4",{id:"pointers"},"Pointers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'func main () {\n  b := *getPointer()\n  fmt.Println("Value is", b)\n}\n \nfunc getPointer () (myPointer *int) {\n  a := 234\n  return &a\n}\n')),(0,a.kt)("h3",{id:"flow-control"},"Flow Control"),(0,a.kt)("h4",{id:"conditional"},"Conditional"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'if day == "sunday" || day == "saturday" {\n  rest()\n} else if day == "monday" && isTired() {\n  groan()\n} else {\n  work()\n}\n')),(0,a.kt)("h4",{id:"statements-in-if"},"Statements in if"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'if _, err := getResult(); err != nil {\n  fmt.Println("Uh oh")\n}\n')),(0,a.kt)("h4",{id:"switch"},"Switch"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'switch day {\n  case "sunday":\n    // cases don\'t "fall through" by default!\n    fallthrough\n\n  case "saturday":\n    rest()\n\n  default:\n    work()\n}\n')),(0,a.kt)("h4",{id:"for-range-loop"},"For-Range loop"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'entry := []string{"Jack","John","Jones"}\nfor i, val := range entry {\n  fmt.Printf("At position %d, the character %s is present\\n", i, val)\n}\n')),(0,a.kt)("h4",{id:"for-loop"},"For loop"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'for count := 0; count <= 10; count++ {\n  fmt.Println("My counter is at", count)\n}\n')))}p.isMDXComponent=!0}}]);