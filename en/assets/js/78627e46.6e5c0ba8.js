"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[3634],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return u}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),m=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=m(r),u=n,k=d["".concat(p,".").concat(u)]||d[u]||s[u]||i;return r?a.createElement(k,o(o({ref:t},c),{},{components:r})):a.createElement(k,o({ref:t},c))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var m=2;m<i;m++)o[m]=r[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2488:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return m},toc:function(){return c},default:function(){return d}});var a=r(7462),n=r(3366),i=(r(7294),r(3905)),o=["components"],l={title:"Dcoker Swarm",description:"Docker Swarm Snippets",extends:"_layouts.documentation",section:"content"},p="Docker Swarm",m={unversionedId:"docker-swarm/readme",id:"docker-swarm/readme",title:"Dcoker Swarm",description:"Docker Swarm Snippets",source:"@site/docs/docker-swarm/readme.md",sourceDirName:"docker-swarm",slug:"/docker-swarm/",permalink:"/my-docs/en/docs/docker-swarm/",editUrl:"https://github.com/easy-quest/my-docs/edit/master/website/docs/docker-swarm/readme.md",tags:[],version:"current",frontMatter:{title:"Dcoker Swarm",description:"Docker Swarm Snippets",extends:"_layouts.documentation",section:"content"},sidebar:"tutorialSidebar",previous:{title:"Install Docker-CE on Ubuntu Linux 18.04",permalink:"/my-docs/en/docs/docker/"},next:{title:"Git",permalink:"/my-docs/en/docs/git/branch"}},c=[{value:"About docker swarm",id:"about-docker-swarm",children:[],level:2},{value:"Prerequisite",id:"prerequisite",children:[],level:2},{value:"Command reference",id:"command-reference",children:[],level:2}],s={toc:c};function d(e){var t=e.components,r=(0,n.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"docker-swarm"},"Docker Swarm"),(0,i.kt)("h2",{id:"about-docker-swarm"},"About docker swarm"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Cluster management integrated with Docker Engine"),(0,i.kt)("li",{parentName:"ul"},"Decentralized design"),(0,i.kt)("li",{parentName:"ul"},"Declarative service model"),(0,i.kt)("li",{parentName:"ul"},"Scaling"),(0,i.kt)("li",{parentName:"ul"},"Desired state reconciliation"),(0,i.kt)("li",{parentName:"ul"},"Multi-host networking"),(0,i.kt)("li",{parentName:"ul"},"Service discovery"),(0,i.kt)("li",{parentName:"ul"},"Load balancing"),(0,i.kt)("li",{parentName:"ul"},"Secure by default"),(0,i.kt)("li",{parentName:"ul"},"Rolling updates")),(0,i.kt)("h2",{id:"prerequisite"},"Prerequisite"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Docker Engine installed"),(0,i.kt)("li",{parentName:"ul"},"Port enable for comunicate each node",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"TCP: 2376"),(0,i.kt)("li",{parentName:"ul"},"TCP: 2377"),(0,i.kt)("li",{parentName:"ul"},"TCP/UDP: 7946"),(0,i.kt)("li",{parentName:"ul"},"UDP: 4789")))),(0,i.kt)("h2",{id:"command-reference"},"Command reference"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"docker swarm init\nfor Initialize a swarm mode"),(0,i.kt)("p",{parentName:"li"}," command: ",(0,i.kt)("inlineCode",{parentName:"p"},"docker swarm init [OPTIONS]")),(0,i.kt)("p",{parentName:"li"}," options:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--advertise-addr")," : \tAdvertised address (format: <ip|interface>","[:port]",")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--autolock")," : Enable manager autolocking (requiring an unlock key to start a stopped manager)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--availability")," : Availability of the node (\u201cactive\u201d|\u201dpause\u201d|\u201ddrain\u201d)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--cert-expiry")," : Validity period for node certificates (ns|us|ms|s|m|h)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--data-path-addr")," : Address or interface to use for data path traffic (format: <ip|interface>)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--data-path-port")," : Port number to use for data path traffic (1024 - 49151). If no value is set or is set to 0, the default port (4789) is used.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--default-addr-pool")," : default address pool in CIDR format")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--default-addr-pool-mask-length")," : default address pool subnet mask length")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--dispatcher-heartbeat")," : Dispatcher heartbeat period (ns|us|ms|s|m|h)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--external-ca")," : Specifications of one or more certificate signing endpoints")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--force-new-cluster")," : Force create a new cluster from current state")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--listen-addr")," : Listen address (format: <ip|interface>","[:port]",")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--max-snapshots")," : Number of additional Raft snapshots to retain")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--snapshot-interval")," : Number of log entries between Raft snapshots")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--task-history-limit")," : \tTask history retention limit"),(0,i.kt)("p",{parentName:"li"},"reference : ",(0,i.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/commandline/swarm_init"},"https://docs.docker.com/engine/reference/commandline/swarm_init"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"docker swarm join\nfor join a swarm as a node and/or manager"),(0,i.kt)("p",{parentName:"li"}," command: ",(0,i.kt)("inlineCode",{parentName:"p"},"docker swarm join [OPTIONS] HOST:PORT")),(0,i.kt)("p",{parentName:"li"}," options:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--advertise-addr")," : Advertised address (format: <ip|interface>","[:port]",")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--availability")," : Availability of the node (\u201cactive\u201d|\u201dpause\u201d|\u201ddrain\u201d)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--data-path-addr\t")," : Address or interface to use for data path traffic (format: <ip|interface>)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--listen-addr")," : Listen address (format: <ip|interface>","[:port]",")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--token")," : Token for entry into the swarm"),(0,i.kt)("p",{parentName:"li"},"reference: ",(0,i.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/commandline/swarm_join/"},"https://docs.docker.com/engine/reference/commandline/swarm_join/")))))),(0,i.kt)("hr",null),(0,i.kt)("p",null,"There are still have more reference to this snippets"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"docker stack"),(0,i.kt)("li",{parentName:"ul"},"docker service")))}d.isMDXComponent=!0}}]);